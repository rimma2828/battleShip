package responses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"battleship/app/generated/models"

	"github.com/mailru/easyjson"
)

const (
	FightAddOKCode int = 200
)

/*FightAddOK Returns status

swagger:response fightAddOK
*/
type FightAddOK struct {

	/*
	  In: Body
	*/
	Payload FightAddOKBody `json:"body,omitempty"`

	// Binary payload for response writer
	BinPayload []byte
}

// NewFightAddOK creates FightAddOK with default headers values
func NewFightAddOK() *FightAddOK {
	return &FightAddOK{}
}

// WithPayload adds the payload to the fight add o k response
func (o *FightAddOK) WithPayload(payload FightAddOKBody) *FightAddOK {
	o.Payload = payload
	return o
}

// WithBinPayload adds binnary payload to fight add o k response
func (o *FightAddOK) WithBinPayload(bytes []byte) *FightAddOK {
	o.BinPayload = bytes
	return o
}

// WriteResponse to the client
func (o *FightAddOK) WriteResponse(rw http.ResponseWriter) error {

	rw.WriteHeader(FightAddOKCode)

	if o.BinPayload != nil {
		_, err := rw.Write(o.BinPayload)
		return err
	}
	payload := o.Payload

	_, _, err := easyjson.MarshalToHTTPResponseWriter(payload, rw)
	return err

	return nil
}

/*FightAddBody fight add body
swagger:model FightAddBody
*/
// easyjson:json
type FightAddBody struct {

	// id
	// Required: true
	ID string `json:"id"`

	// jsonrpc
	// Required: true
	Jsonrpc string `json:"jsonrpc"`

	// method
	// Required: true
	Method string `json:"method"`

	// params
	// Required: true
	Params models.FightActParams `json:"params"`
}

/*FightAddOKBody fight add o k body
swagger:model FightAddOKBody
*/
// easyjson:json
type FightAddOKBody struct {
	models.BaseResponse

	// result
	// Required: true
	Result models.FightActResponse `json:"result"`
}
