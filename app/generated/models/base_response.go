package models

// This file was generated by the gogi.
// Editing this file might prove futile when you re-run the gogi generate command

import (
	"fmt"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// This file was generated by the gogi tool.
// Editing this file might prove futile when you re-run the swagger generate command

// BaseResponse base response
// swagger:model BaseResponse

// easyjson:json
type BaseResponse struct {

	// error
	Error *Error `json:"error,omitempty"`

	// id
	// Required: true
	ID string `json:"id"`

	// jsonrpc
	// Required: true
	Jsonrpc string `json:"jsonrpc"`
}

// Validate validates this base response
func (m *BaseResponse) Validate() error {
	var res []error

	if err := m.validateError(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJsonrpc(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *BaseResponse) validateError() error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *BaseResponse) validateID() error {

	if err := validate.RequiredString("id", "", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BaseResponse) validateJsonrpc() error {

	if err := validate.RequiredString("jsonrpc", "", string(m.Jsonrpc)); err != nil {
		return err
	}

	return nil
}
