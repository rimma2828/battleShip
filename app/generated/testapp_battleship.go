package server

// This file was generated by the gogi.
// Editing this file might prove futile when you re-run the gogi generate command

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"

	"stash.lamoda.ru/gotools/rpc/proto/jsonrpc2"
	"stash.lamoda.ru/gotools/rpc/server"

	"go.uber.org/zap"
)

const (
	HTTP_API_PREFIX = "/v1/"
)

var disableLoggingIncomingRequests = os.Getenv("DISABLE_LOGGING_INCOMING_REQUESTS") == "true"

type Server struct {
	*server.Server
}

func New(ver, logIndex string) *Server {

	codec := jsonrpc2.NewCodec()
	codec.SetPathPrefix(HTTP_API_PREFIX)

	rpc := server.NewServer(server.Config{
		Codec:    codec,
		Version:  ver,
		LogIndex: logIndex,
	})

	srv := &Server{
		Server: rpc,
	}

	srv.AddOnPanic(func(ctx context.Context, err interface{}) {
		if md := server.GetMetadataFromContext(ctx); md != nil && md.Logger != nil {
			md.Logger.DPanic("Rpc server panicked", zap.Any("error", err), zap.Stack("stacktrace"), zap.String("trace_id", md.TraceId))
		} else {
			srv.Log.DPanic("Rpc server panicked", zap.Any("error", err), zap.Stack("stacktrace"), zap.String("trace_id", md.TraceId))
		}
	})

	if !disableLoggingIncomingRequests {
		srv.AddOnRequest(func(ctx context.Context, r *http.Request) {
			if r == nil {
				return
			}

			traceid := "empty"
			headers := &bytes.Buffer{}
			for k, v := range r.Header {
				if k == "X-Trace-Id" && len(v) > 0 {
					traceid = v[0]
				}

				headers.WriteString(fmt.Sprintf("%s:%s,", k, v))
			}

			body, _ := ioutil.ReadAll(r.Body)
			r.Body.Close()
			bodyReadCloser := ioutil.NopCloser(bytes.NewBuffer(body))
			r.Body = bodyReadCloser

			srv.Log.Info("Incoming request",
				zap.String("uri", r.RequestURI),
				zap.String("host", r.Host),
				zap.String("trace_id", traceid),
				zap.String("http_method", r.Method),
				zap.String("headers", headers.String()),
				zap.String("body", string(body)),
			)
		})
	}

	return srv
}

func (srv *Server) Run() {
	srv.Server.Run(server.RunConfig{
		SwaggerSpec: SwaggerJSON,
		HttpPrefix:  HTTP_API_PREFIX,
	})
}
